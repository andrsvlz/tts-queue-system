version: '3.8'

services:
  # RabbitMQ - Sistema de colas
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: tts-rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"     # Puerto AMQP
      - "15672:15672"   # Puerto Management UI
    environment:
      RABBITMQ_DEFAULT_USER: tts_user
      RABBITMQ_DEFAULT_PASS: tts_password_2024
      RABBITMQ_DEFAULT_VHOST: tts_vhost
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - tts_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Cache y estado de trabajos
  redis:
    image: redis:7-alpine
    container_name: tts-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tts_network
    command: redis-server --appendonly yes

  # API REST - Recibe solicitudes de TTS
  tts-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: tts-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - RABBITMQ_URL=amqp://tts_user:tts_password_2024@rabbitmq:5672/tts_vhost
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=5000
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tts_network
    volumes:
      - ./logs:/app/logs

  # Worker 1 - Procesador de llamadas TTS
  tts-worker-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: tts-worker-1
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://tts_user:tts_password_2024@rabbitmq:5672/tts_vhost
      - REDIS_URL=redis://redis:6379/0
      - WORKER_ID=worker-1
      - WORKER_CONCURRENCY=1
      - ASTERISK_HOST=host.docker.internal
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tts_network
    volumes:
      - ./logs:/app/logs
      - /var/lib/asterisk/sounds:/var/lib/asterisk/sounds
      - /var/spool/asterisk/outgoing:/var/spool/asterisk/outgoing

  # Worker 2 - Procesador adicional
  tts-worker-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: tts-worker-2
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://tts_user:tts_password_2024@rabbitmq:5672/tts_vhost
      - REDIS_URL=redis://redis:6379/0
      - WORKER_ID=worker-2
      - WORKER_CONCURRENCY=1
      - ASTERISK_HOST=host.docker.internal
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tts_network
    volumes:
      - ./logs:/app/logs
      - /var/lib/asterisk/sounds:/var/lib/asterisk/sounds
      - /var/spool/asterisk/outgoing:/var/spool/asterisk/outgoing

  # Worker 3 - Procesador adicional
  tts-worker-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: tts-worker-3
    restart: unless-stopped
    environment:
      - RABBITMQ_URL=amqp://tts_user:tts_password_2024@rabbitmq:5672/tts_vhost
      - REDIS_URL=redis://redis:6379/0
      - WORKER_ID=worker-3
      - WORKER_CONCURRENCY=1
      - ASTERISK_HOST=host.docker.internal
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tts_network
    volumes:
      - ./logs:/app/logs
      - /var/lib/asterisk/sounds:/var/lib/asterisk/sounds
      - /var/spool/asterisk/outgoing:/var/spool/asterisk/outgoing

  # Dashboard - Monitoreo del sistema
  tts-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: tts-dashboard
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - RABBITMQ_URL=amqp://tts_user:tts_password_2024@rabbitmq:5672/tts_vhost
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tts_network

# Vol√∫menes persistentes
volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

# Red personalizada
networks:
  tts_network:
    driver: bridge
